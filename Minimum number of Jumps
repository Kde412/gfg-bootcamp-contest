
class Solution {
  public: 
  int max(int x, int y)
{

    return (x > y) ? x : y;
}


int minJumps(int arr[], int n)
{ 
 if (n <= 1)

        return 0;
 
if (arr[0] == 0)


        return -1;
 

  

    int maxReach = arr[0];
 

   

    int step = arr[0];
int jump = 1;
  
 int i = 1;

    for (i = 1; i < n; i++) {


        if (i == n - 1)

            return jumps; 
  maxReach = max(maxReach, i + arr[i]);
  
 step--; 
        if (step == 0) { 
             jump++;
          if (i >= maxReach)

                return -1;
         step = maxReach - i;

        }

    }
 

    return -1;
}
    /*int minJumps(int arr[], int n) {
         /* if(n==1) 
          return 0;
          int ans = INT_MAX;

    for (int i = n - 2; i >= 0; i--) {

        if (i + arr[i] >= n - 1) {

            int s = minJumps(arr, i + 1);

            if (s != INT_MAX)

                ans = min(ans, s + 1);

        }

    }
 

    return ans; 
    }
    
    int* ans = new int[n];

    int i, j;
 

    if (n == 0 || arr[0] == 0)

        return INT_MAX;
 

    ans[0] = 0;
 

  

    for (i = 1; i < n; i++) {

        ans[i] = INT_MAX;

        for (j = 0; j < i; j++) {

            if (i <= j + arr[j] && ans[j] != INT_MAX) {

                ans[i] = min(ans[i], ans[j] + 1);

                break;

            }

        }

    }
    if(ans)
    return ans[n - 1];  
    else 
    return -1;
    }*/

};
